<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Employee Report</title>
    <style>
        body {
            font-family: 'Lora';
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            background: url('/backgroundImg5.jpg') no-repeat center center / cover;
            padding: 10px;
        }

        .container {
            background: rgba(255, 255, 255, 0.9);
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
            max-width: 800px;
            width: 100%;
            margin-top: 60px;
        }

        h1 {
            font-size: clamp(1.2rem, 3vw, 1.5rem);
            margin-bottom: 20px;
            text-align: center;
        }

        .section {
            margin-top: 20px;
        }

        .section h2 {
            font-size: clamp(1rem, 2.5vw, 1.3rem);
            color: #333;
        }

        .result-item {
            border-bottom: 1px solid #ddd;
            padding: 10px 0;
        }

        .result-item:last-child {
            border-bottom: none;
        }

        .result-item p {
            margin: 5px 0;
            font-size: clamp(0.9rem, 2vw, 1rem);
        }


        .refresh-button {
            background: #005A9C;
            font-family: 'Lora';
            color: white;
            border: none;
            padding: 10px 15px;
            font-size: clamp(0.9rem, 2vw, 1rem);
            cursor: pointer;
            border-radius: 5px;
            transition: background 0.3s ease-in-out;
        }

        .refresh-button:hover {
            background: #0072B2;
        }

        @media (max-width: 768px) {
            .container {
                padding: 15px;
                margin-top: 80px;
            }

            .result-item {
                padding: 8px 0;
            }

            .button-container {
                flex-direction: column;
                align-items: center;
            }
        }
    </style>
</head>

<body>
    <%- include('navbar', { employeeID: employeeID, appointment: appointment }) %>
    <div class="container">
        <h1>Employee Test Report</h1>
        <p>Employee ID: <strong><%= employeeID %></strong></p>

        <!-- Button Container for Responsive Layout -->
        
        <button class="refresh-button" onclick="window.location.reload();">
            Refresh Report
        </button>
        <button id="generate-pdf" class="refresh-button" onclick="generatePDF()">Generate PDF</button>
        <button id="store-in-dropbox" class="refresh-button" onclick="storeInDropbox()">
            Store in Dropbox
        </button>

        
        <% let bmiValue = null; %>

        <% processedResults.counterResults.forEach(result => { %>
            <% if (result.testName === "BMI" && result.result.bmi !== undefined) { %>
                <% bmiValue = result.result.bmi; %>
            <% } %>
        <% }); %>

        <% if (processedResults.counterResults.length > 0) { %>
        <div class="section">
            <h2>Standard Tests</h2>
            <% if (bmiValue !== null && (bmiValue > 24.5 || bmiValue < 18.5)) { %>
                <div style="text-align: center;">
                    <span style="color: red; font-weight: bold; font-size: 0.9rem;">Dangerous BMI !</span>
                    <button class="refresh-button" style="margin-left: 10px; padding: 6px; font-size: 0.8rem" onclick="window.open('/bmidoctor/<%= employeeID %>', '_blank')">
                        Visit a Doctor
                    </button>
                </div>
            <% } %>

            <% processedResults.counterResults.forEach(result => { %>
                <div class="result-item">
                    <p><strong>Test Name:</strong> <%= result.testName %></p>
                    <% Object.entries(result.result).forEach(([key, value]) => { %>
                        <p><strong><%= key %>:</strong> <%= value || 'Pending Result' %></p>
                    <% }) %>
                </div>
            <% }); %>                
        </div>
        <% } %>

        <% if (processedResults.addOnCounters.length > 0) { %>
        <div class="section">
            <h2>Additional Tests</h2>
            <% processedResults.addOnCounters.forEach(counter => { %>
            <div class="result-item">
                <p><strong>Test Name:</strong> <%= counter.testName || 'No Name Provided' %></p>
                <% if (counter.results && counter.results.length > 0) { %>
                    <% counter.results.forEach(test => { %>
                        <p><strong><%= test.testName || 'Subtest Name' %>:</strong> <%= test.result || 'Pending Result' %></p>
                    <% }); %>
                <% } else { %>
                    <p>Pending Result</p>
                <% } %>
            </div>
            <% }); %>
        </div>
        <% } %>

        <% if (processedResults.counterResults.length === 0 && processedResults.addOnCounters.length === 0) { %>
        <p>No test results available for this employee.</p>
        <% } %>
    </div>

    <script>
        async function generatePDF() {
            const response = await fetch(`/generate-pdf/<%= employeeID %>`, {
                method: 'POST',
            });
    
            if (response.ok) {
                const blob = await response.blob();
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `Employee_TestResult_Report_<%= employeeID %>.pdf`;
                document.body.appendChild(a);
                a.click();
                a.remove();
            } else {
                alert('Failed to generate PDF. Please try again.');
            }
        }
        async function storeInDropbox() {
        try {
            const response = await fetch(`/store-in-dropbox/<%= employeeID %>`, {
                method: 'POST',
            });

            if (response.ok) {
                alert('Report successfully stored in Dropbox!');
            } else {
                alert('Failed to store the report in Dropbox.');
            }
        } catch (error) {
            console.error('Error:', error);
            alert('Error storing the report in Dropbox.');
        }
        }
        
    </script>
    <script
    type="text/javascript">window.$crisp = []; window.CRISP_WEBSITE_ID = "7010eacc-7d4f-4ec6-b1b4-fd3a79b69d15"; (function () { d = document; s = d.createElement("script"); s.src = "https://client.crisp.chat/l.js"; s.async = 1; d.getElementsByTagName("head")[0].appendChild(s); })();</script>
</body>

</html>
