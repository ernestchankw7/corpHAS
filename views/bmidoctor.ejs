<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BMI Doctor Consultation</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Lora', serif;
        }

        body {
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 10px;
            background: url('/backgroundImg5.jpg') no-repeat center center fixed;
            background-size: cover;
            color: #333;
        }

        .container {
            width: 90%;
            max-width: 600px;
            background-color: rgba(236, 239, 241, 0.95);
            padding: 60px;
            border-radius: 10px;
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
        }

        .container h1 {
            font-size: 24px;
            font-weight: bold;
            color: #005A9C;
            margin-bottom: 20px;
            text-align: center;
        }

        .input-box {
            width: 100%;
            margin-bottom: 20px;
        }

        .input-box label {
            display: block;
            font-weight: bold;
            color: #005A9C;
            margin-bottom: 5px;
        }

        select, input[type="date"], input[type="time"] {
            width: 100%;
            height: 45px;
            font-size: 16px;
            padding: 8px;
            border-radius: 5px;
            border: 1px solid #ccc;
            transition: all 0.3s ease;
        }

        select:focus, input:focus {
            border-color: #005A9C;
            box-shadow: 0 0 5px rgba(0, 90, 156, 0.3);
        }

        button {
            width: 100%;
            height: 50px;
            background: linear-gradient(135deg, #005A9C, #0072B2);
            color: #fff;
            border: none;
            border-radius: 5px;
            font-size: 18px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        button:hover {
            background: linear-gradient(-135deg, #0072B2, #005A9C);
            box-shadow: 0 4px 10px rgba(0, 90, 156, 0.2);
        }

        /* Mobile responsiveness */
        @media (max-width: 768px) {
            .container {
                width: 95%;
                padding: 30px;
            }

            .container h1 {
                font-size: 22px;
            }

            select, input {
                height: 40px;
                font-size: 14px;
            }

            button {
                height: 45px;
                font-size: 16px;
            }
        }

        @media (max-width: 480px) {
            .container {
                padding: 20px;
            }

            .container h1 {
                font-size: 20px;
            }

            select, input {
                height: 38px;
                font-size: 14px;
            }

            button {
                height: 42px;
                font-size: 14px;
            }
        }
    </style>
</head>

<body>
    <div class="container">
        <h1>Doctor Consultation Booking</h1>
        <form id="doctorBookingForm" method="POST" action="/book-doctor-appointment">
            <input type="hidden" name="employee_id" value="<%= employee.employee_id %>">
        
            <div class="input-box">
                <label for="clinic">Clinic's near you:</label>
                <select id="clinic" name="clinic" required>
                    <option value="" disabled selected>Select a clinic</option>
                    <option value="Clinic A">Clinic A</option>
                    <option value="Clinic B">Clinic B</option>
                    <option value="Clinic C">Clinic C</option>
                </select>
            </div>
        
            <div class="input-box">
                <label for="date">Select Date:</label>
                <input type="date" id="date" name="date" required>
            </div>
        
            <div class="input-box">
                <label for="time">Select Time:</label>
                <select id="time" name="time" required>
                    <option value="" disabled selected>Select a time</option>
                </select>
            </div>
        
            <button type="submit">Book Appointment</button>
        </form>
    </div>

    <script>
        const dateInput = document.getElementById('date');
        const timeSelect = document.getElementById('time');

        function populateTimeSlots(date) {
            const startHour = 9;
            const endHour = 18;
            const interval = 30;
            timeSelect.innerHTML = '<option value="" disabled selected>Select a time</option>';

            const now = new Date();
            const selectedDate = new Date(date);
            const isToday = selectedDate.toDateString() === now.toDateString();

            for (let hour = startHour; hour <= endHour; hour++) {
                for (let minute = 0; minute < 60; minute += interval) {
                    if (hour === endHour && minute > 0) break;

                    const time = new Date();
                    time.setHours(hour);
                    time.setMinutes(minute);

                    if (isToday && time < now) continue;

                    const formattedTime = time.toTimeString().slice(0, 5);
                    const option = document.createElement('option');
                    option.value = formattedTime;
                    option.textContent = formattedTime;
                    timeSelect.appendChild(option);
                }
            }
        }

        const today = new Date().toISOString().split('T')[0];
        dateInput.min = today;
        dateInput.addEventListener('change', () => populateTimeSlots(dateInput.value));
        populateTimeSlots(today);

        // Clinics data (replace with API or database fetch in production)
        const clinics = [
            { name: "Central 24-HR Clinic(Woodlands)", lat: 1.4481570675780482, lng: 103.79871396379644 },
            { name: "NorthLink (Woodlands) Clinic", lat: 1.4358078464591948, lng: 103.78839164914092 },
            { name: "Central 24-HR Clinic(Marsiling)", lat: 1.4321102385520434, lng: 103.773685097115 },
            { name: "EH Medical Familiy Clinic(Woodlands)", lat: 1.4472116712325054, lng: 103.8060432667359 },
            { name: "Woodlands Health Campus", lat: 1.425639818812272, lng: 103.7942489265061 },
            { name: "Peace Familiy Clinic", lat: 1.4329012429289043, lng: 103.78670453967196 },
            { name: "Martin Medical Centre(Woodlands)", lat: 1.4387358972464066, lng: 103.78237009042647 },
            { name: "Woodlands Familiy Clinic", lat: 1.4309339329573079, lng: 103.77594227991301 },
            { name: "Tan & Nah Familiy Clinic", lat: 1.4462875309967964, lng: 103.8006539722416 },
            { name: "My Familiy Clinic", lat: 1.4457007883285367, lng: 103.79833847694073 },
            { name: "Parkway Shenton Medical Clinic, Woodlands MRT", lat: 1.4376809953781735, lng: 103.78845018461077 },
        ];

        const clinicSelect = document.getElementById('clinic');

        function getDistance(lat1, lon1, lat2, lon2) {
            const R = 6371; // Radius of Earth in kilometers
            const dLat = ((lat2 - lat1) * Math.PI) / 180;
            const dLon = ((lon2 - lon1) * Math.PI) / 180;
            const a =
                Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                Math.cos((lat1 * Math.PI) / 180) *
                Math.cos((lat2 * Math.PI) / 180) *
                Math.sin(dLon / 2) *
                Math.sin(dLon / 2);
            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
            return R * c;
        }

        function updateClinicOptions() {
            // Check if Geolocation API is available
            if (!navigator.geolocation) {
                alert("Geolocation is not supported by your browser.");
                return;
            }

            // Get user's location
            navigator.geolocation.getCurrentPosition(
                (position) => {
                    const userLat = position.coords.latitude;
                    const userLng = position.coords.longitude;

                    // Calculate distances to clinics
                    const distances = clinics.map(clinic => ({
                        ...clinic,
                        distance: getDistance(userLat, userLng, clinic.lat, clinic.lng),
                    }));

                    // Sort by distance and take the 3 closest clinics
                    const nearestClinics = distances.sort((a, b) => a.distance - b.distance).slice(0, 3);

                    // Update the select options
                    clinicSelect.innerHTML = '<option value="" disabled selected>Select a clinic</option>';
                    nearestClinics.forEach(clinic => {
                        const option = document.createElement('option');
                        option.value = clinic.name;
                        option.textContent = `${clinic.name} (${clinic.distance.toFixed(2)} km)`;
                        clinicSelect.appendChild(option);
                    });
                },
                (error) => {
                    console.error("Error fetching location:", error);
                    alert("Unable to fetch your location. Please enable location access.");
                }
            );
        }

        // Call this on page load
        updateClinicOptions();
    </script>
    <script
    type="text/javascript">window.$crisp = []; window.CRISP_WEBSITE_ID = "7010eacc-7d4f-4ec6-b1b4-fd3a79b69d15"; (function () { d = document; s = d.createElement("script"); s.src = "https://client.crisp.chat/l.js"; s.async = 1; d.getElementsByTagName("head")[0].appendChild(s); })();</script>
</body>

</html>